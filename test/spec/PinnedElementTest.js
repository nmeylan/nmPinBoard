// Generated by CoffeeScript 1.7.1
(function() {
  describe("Pinned element test", function() {
    var pinnedElementView, pinnedElements;
    pinnedElementView = void 0;
    pinnedElements = void 0;
    beforeEach(function() {
      return pinnedElementView = new nmPinBoard.PinnedElementView({
        model: new nmPinBoard.PinnedElement()
      });
    });
    describe("Create new Pinned element", function() {
      it("Success", function() {
        return expect(pinnedElementView.model).toBeDefined();
      });
      return it("Default id", function() {
        return expect(pinnedElementView.model.get("id")).toEqual(-1);
      });
    });
    describe("Use validation on attributes", function() {
      it("Validate title can't be blank", function() {
        pinnedElementView.model.set({
          'title': ''
        }, {
          validate: true
        });
        return expect(pinnedElementView.model.isValid()).toBeFalsy();
      });
      return it("Validate content can't be blank", function() {
        pinnedElementView.model.set({
          'content': ''
        }, {
          validate: true
        });
        return expect(pinnedElementView.model.isValid()).toBeFalsy();
      });
    });
    describe("Use validation on customization", function() {
      it("Validate positionX not a number", function() {
        var custo;
        custo = pinnedElementView.model.get("customization");
        custo.set({
          "position": {
            offsetX: "ff",
            offsetY: 0
          }
        }, {
          validate: true
        });
        pinnedElementView.model.set({
          "customization": custo
        }, {
          validate: true
        });
        return expect(pinnedElementView.model.isValid()).toBeFalsy();
      });
      it("Validate positionY not a number", function() {
        var custo;
        custo = pinnedElementView.model.get("customization");
        custo.set({
          "position": {
            offsetX: 50,
            offsetY: "ff"
          }
        }, {
          validate: true
        });
        pinnedElementView.model.set({
          "customization": custo
        }, {
          validate: true
        });
        return expect(pinnedElementView.model.isValid()).toBeFalsy();
      });
      it("Validate color can't be blank", function() {
        var custo;
        custo = pinnedElementView.model.get("customization");
        custo.set({
          "color": ' '
        }, {
          validate: true
        });
        pinnedElementView.model.set({
          "customization": custo
        }, {
          validate: true
        });
        return expect(pinnedElementView.model.isValid()).toBeFalsy();
      });
      it("Validate opacity not a number", function() {
        var custo;
        custo = pinnedElementView.model.get("customization");
        custo.set({
          "opacity": 'gg'
        }, {
          validate: true
        });
        pinnedElementView.model.set({
          "customization": custo
        }, {
          validate: true
        });
        return expect(pinnedElementView.model.isValid()).toBeFalsy();
      });
      it("Validate opacity not in range > 1", function() {
        var custo;
        custo = pinnedElementView.model.get("customization");
        custo.set({
          "opacity": 1.2
        }, {
          validate: true
        });
        pinnedElementView.model.set({
          "customization": custo
        }, {
          validate: true
        });
        return expect(pinnedElementView.model.isValid()).toBeFalsy();
      });
      return it("Validate opacity not in range < 0", function() {
        var custo;
        custo = pinnedElementView.model.get("customization");
        custo.set({
          "opacity": -0.01
        }, {
          validate: true
        });
        pinnedElementView.model.set({
          "customization": custo
        }, {
          validate: true
        });
        return expect(pinnedElementView.model.isValid()).toBeFalsy();
      });
    });
    afterEach(function() {
      return pinnedElementView = void 0;
    });
    return describe("Collection tests", function() {
      beforeEach(function() {
        pinnedElements = new nmPinBoard.PinnedElements();
        return pinnedElements.add(pinnedElementView.model);
      });
      describe("Use collection basics operations", function() {
        it("Add element", function() {
          return expect(pinnedElements.length).toBeGreaterThan(0);
        });
        it("Remove element", function() {
          pinnedElements.remove(pinnedElementView.model);
          return expect(pinnedElements.length).toEqual(0);
        });
        return it("Update and retrieve element", function() {
          pinnedElementView.model.set({
            id: 666
          });
          expect(pinnedElements.get(666)).toBeDefined();
          return expect(pinnedElements.get(667)).not.toBeDefined();
        });
      });
      describe("Use collection persistence operations", function() {
        beforeEach(function() {
          var e, _i, _len, _ref, _results;
          pinnedElementView.model.set({
            id: 666,
            title: "MY FUCKING TITLE"
          });
          _ref = pinnedElements.models;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            _results.push(e.save());
          }
          return _results;
        });
        it("Fetch persisted elements", function() {
          pinnedElements.reset();
          expect(pinnedElements.length).toEqual(0);
          pinnedElements.fetch();
          expect(pinnedElements.length).toBeGreaterThan(0);
          return expect(pinnedElements.get(666)).toBeDefined();
        });
        it("Remove persisted elements", function() {
          var e, _i, _len, _ref;
          expect(pinnedElements.length).toBeGreaterThan(0);
          expect(pinnedElements.get(666)).toBeDefined();
          _ref = pinnedElements.models;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            e.destroy();
          }
          expect(pinnedElements.length).toEqual(0);
          return expect(pinnedElements.get(666)).not.toBeDefined();
        });
        it("Try to persisted unvalidate element fail!", function() {
          pinnedElementView.model.set({
            title: ""
          });
          pinnedElementView.model.save();
          return expect(pinnedElementView.model.isValid()).toBeFalsy();
        });
        return afterEach(function() {
          var e, _i, _len, _ref, _results;
          _ref = pinnedElements.models;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            _results.push(e.destroy());
          }
          return _results;
        });
      });
      return afterEach(function() {
        pinnedElementView = void 0;
        return pinnedElements = void 0;
      });
    });
  });

}).call(this);
